{
	"info": {
		"_postman_id": "391f9154-03e1-44ec-8ea0-2c2927cee8ae",
		"name": "Grocery store API testing",
		"description": "This API allows you to place a grocery order which will be ready for pick-up in the store. The API is available at:\n\n[https://simple-grocery-store-api.glitch.me](https://simple-grocery-store-api.glitch.me)\n\nDocumentation:\n\n[https://github.com/vdespa/Postman-Complete-Guide-API-Testing/blob/main/simple-grocery-store-api.md](https://github.com/vdespa/Postman-Complete-Guide-API-Testing/blob/main/simple-grocery-store-api.md)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28370845"
	},
	"item": [
		{
			"name": "GET status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// check if status response is UP \r",
							"pm.test(\"Server response: UP\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/status",
					"host": [
						"{{URL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Show all products\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const products = response.filter((product) => product.inStock === true);\r",
							"const product1 = products[0];\r",
							"const product4 = products[3];\r",
							"\r",
							"pm.collectionVariables.set(\"productID\", product1.id);\r",
							"pm.collectionVariables.set(\"replaceProductID\", product4.id);\r",
							"console.log(product1.id);\r",
							"console.log(product4.id);\r",
							"\r",
							"\r",
							"pm.test(\"Product saved to collection Variable and found inStock with ID = \" + pm.collectionVariables.get(\"productID\"), () => {\r",
							"    pm.expect(product1).to.be.an('object');\r",
							"    pm.expect(product1.inStock).equal(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Show product with ID = \" + pm.collectionVariables.get(\"productID\"), function () {\r",
							"    pm.expect(pm.response.json().id).to.equal(pm.collectionVariables.get(\"productID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains only one object\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').and.to.not.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products/:productId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						":productId"
					],
					"query": [
						{
							"key": "category",
							"value": "coffee",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "productId",
							"value": "{{productID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /products Query=coffee",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for Query category=coffe\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"All products have category coffee\", function () {\r",
							"    pm.response.json().forEach(product => {\r",
							"        pm.expect(product.category).to.equal(\"coffee\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products?category=coffee",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "coffee"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET product by category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains only category = 'fresh-produce'\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    const allHaveCategory = pm.response.json().every(item => item.category === 'fresh-produce');\r",
							"    pm.expect(allHaveCategory, \"Expected every item to have category 'fresh-produce'\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains limited objects\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.length(3);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products?category=fresh-produce&results=3&available=true",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "fresh-produce"
						},
						{
							"key": "results",
							"value": "3"
						},
						{
							"key": "available",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Register a new API client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API registration: succeed\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Negative TC: API registration = parameters provided are invalid\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Negative TC: API registration = Conflict\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(409);\r",
							"});\r",
							"\r",
							"    const response = pm.response.json();\r",
							"    pm.collectionVariables.set(\"token\", response.accessToken);\r",
							"    console.log(response.accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\": \"{{$randomFirstName}}'s computer\",\r\n    \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api-clients",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create a new cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.collectionVariables.set(\"cartID\", response.cartId);\r",
							"console.log(response.cartId);\r",
							"\r",
							"pm.test(\"New cart: created with ID = \" + pm.collectionVariables.get(\"cartID\"), function () {\r",
							"     pm.expect(pm.response.code).to.equal(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}/carts",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET a cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET cart - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/carts/:cartId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Add item to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 - item added to cart\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Negative TC: Response body contains error message about product already added to cart\", function () {\r",
							"    pm.expect(responseBody.error).to.include(\"This product has already been added to cart.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"productId\": {{productID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/carts/:cartId/items",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET cart items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify response contains productId = \" + pm.collectionVariables.get(\"productID\"), function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.some(item => item.productId === pm.collectionVariables.get(\"productID\"))).to.be.true;\r",
							"});\r",
							"\r",
							"const response = pm.response.json()[0].id\r",
							"pm.collectionVariables.set(\"itemCartID\", response)\r",
							"console.log(response)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/carts/:cartId/items",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH update quantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 -> Quantity updated\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"quantity\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/carts/:cartId/items/:itemId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						},
						{
							"key": "itemId",
							"value": "{{itemCartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET cart items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify quantity of an item in cart = 2\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property('quantity', 2);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/carts/:cartId/items",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT replace product in cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 -> Item in cart replaced\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": {{replaceProductID}},\r\n    \"quantity\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/carts/:cartId/items/:itemId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						},
						{
							"key": "itemId",
							"value": "{{itemCartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE product in cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed JSONError\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Negative TC: Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/carts/:cartId/items/:itemId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						},
						{
							"key": "itemId",
							"value": "{{itemCartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add item to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 - item added to cart\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Negative TC: Response body contains error message about product already added to cart\", function () {\r",
							"    pm.expect(responseBody.error).to.include(\"This product has already been added to cart.\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"productId\": {{productID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/carts/:cartId/items",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET cart items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"const response = pm.response.json()[0].id\r",
							"pm.collectionVariables.set(\"itemCartID\", response)\r",
							"console.log(response)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/carts/:cartId/items",
					"host": [
						"{{URL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Save orderID as a collection variable\", function () {\r",
							"    pm.collectionVariables.set(\"orderID\", pm.response.json().orderId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cartId\": \"{{cartID}}\",\r\n    \"customerName\": \"Marry Jane\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response orders list is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH modify order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204: No Content - Order modified\" , function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"customerName\": \"Joe Doe\",\r\n \"comment\": \"Pick-up at 2pm\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders/:orderId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify username in response = \" + pm.response.json()[0].customerName, function () {\r",
							"    const jsonData = pm.response.json()[0];\r",
							"    pm.expect(jsonData.customerName).to.eql(\"Joe Doe\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204: No Content - Order deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Negative TC: Status code is 404: Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cartId\": \"-ranNsZSroHgj3zbU5LYk\",\r\n    \"customerName\": \"Marry Jane\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}//orders/:orderId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"",
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response contains an empty list\", function () {\r",
							"    pm.expect(pm.response.json()).to.eql([]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/orders/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"orders",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "productID",
			"value": ""
		},
		{
			"key": "replaceProductID",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "cartID",
			"value": ""
		},
		{
			"key": "itemCartID",
			"value": ""
		},
		{
			"key": "orderID",
			"value": ""
		}
	]
}